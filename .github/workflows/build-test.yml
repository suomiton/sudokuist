name: 🏗️ Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Rust/WASM tests
  test-rust:
    name: 🦀 Test Rust/WASM
    runs-on: ubuntu-latest
    
    steps:
    - name: 📚 Checkout
      uses: actions/checkout@v4

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: 📦 Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: 🧪 Run Rust tests
      run: cargo test --verbose

    - name: 🌐 Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0

    - name: 🧪 Test WASM build
      run: wasm-pack test --headless --firefox

  # TypeScript tests and linting
  test-typescript:
    name: 🔧 Test TypeScript
    runs-on: ubuntu-latest
    
    steps:
    - name: 📚 Checkout
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Type check
      run: npm run type-check

    - name: 🧪 Run tests (if available)
      run: npm test 2>/dev/null || echo "No tests configured"

  # Build verification
  build-production:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    needs: [test-rust, test-typescript]
    
    steps:
    - name: 📚 Checkout
      uses: actions/checkout@v4

    - name: 🦀 Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: 📦 Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: 🌐 Install wasm-pack
      uses: jetli/wasm-pack-action@v0.4.0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install npm dependencies
      run: npm ci

    - name: 🏗️ Build production
      run: |
        echo "🦀 Building WASM..."
        npm run build-wasm-release
        echo "📁 Preparing TypeScript..."
        cp -r pkg src/
        echo "🔨 Building production bundle..."
        NODE_ENV=production npx vite build --mode production

    - name: 📊 Analyze bundle size
      run: |
        echo "📊 Bundle Analysis:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        du -sh dist/* | sort -hr >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compressed Sizes" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find dist -name "*.js" -o -name "*.css" | head -10 | while read file; do
          if [ -f "$file" ]; then
            original_size=$(stat -c%s "$file")
            gzipped_size=$(gzip -c "$file" | wc -c)
            echo "$(basename "$file"): ${original_size} bytes → ${gzipped_size} bytes" >> $GITHUB_STEP_SUMMARY
          fi
        done
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-build
        path: dist/
        retention-days: 7

    - name: 📤 Upload WASM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wasm-build
        path: |
          pkg/
          public/*.wasm
          public/*.js
        retention-days: 7
